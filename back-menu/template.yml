AWSTemplateFormatVersion: '2010-09-09'

Parameters:
    APIName:
        Type: String

Resources:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # DB
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MyTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: appsync-coffeeshop-menu
            AttributeDefinitions:
                - AttributeName: PK
                  AttributeType: S
                - AttributeName: SK
                  AttributeType: S
            KeySchema:
                - AttributeName: PK
                  KeyType: HASH
                - AttributeName: SK
                  KeyType: RANGE
            BillingMode: PAY_PER_REQUEST

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync General
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncAPI:
        Type: AWS::AppSync::GraphQLApi
        Properties:
            Name: !Ref APIName
            AuthenticationType: API_KEY
            AdditionalAuthenticationProviders:
                - AuthenticationType: AWS_IAM

    AppSyncSchema:
        Type: AWS::AppSync::GraphQLSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Definition: >
                type Product @aws_api_key @aws_iam {
                  PK: String
                  SK: String
                  title: String
                  price: String
                  category: String
                }

                input ProductInput {
                  PK: String
                  SK: String
                  title: String
                  price: String
                  category: String
                }

                input ListResponseInput {
                  PK: String
                  list: [ProductInput]
                }

                type ListResponse @aws_api_key @aws_iam  {
                  PK: String
                  list: [Product]
                }

                type Query {
                  products(PK: String!): [Product]
                }

                type Mutation {
                  update(input: ListResponseInput ): ListResponse
                    @aws_iam 
                }

                type Subscription {
                  onUpdate(PK: String): ListResponse
                    @aws_subscribe(mutations: ["update"])
                }
    AppSyncAPIKey:
        Type: AWS::AppSync::ApiKey
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Expires: 1627859769

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Datasources
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncDataSourceDynamoDB:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: dynamodb
            Type: AMAZON_DYNAMODB
            ServiceRoleArn: !GetAtt RoleAppSyncDynamoDB.Arn
            DynamoDBConfig:
                TableName: !Ref MyTable
                AwsRegion: !Sub ${AWS::Region}
    RoleAppSyncDynamoDB:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-dynamodb-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - appsync.amazonaws.com
            Policies:
                - PolicyName: PolicyDynamoDB
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:*
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}

    AppSyncDataSourceNone:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: nonedatasource
            Type: NONE

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Resolvers
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ResolverList:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Query
            FieldName: products
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation" : "Query",
                    "query" : {
                        "expression" : "PK = :PK AND begins_with(SK, :SK)",
                        "expressionValues" : {
                            ":PK" : $util.dynamodb.toDynamoDBJson($ctx.args.PK),
                            ":SK" :  $util.dynamodb.toDynamoDBJson("product_")
                        }
                    }
                }
            ResponseMappingTemplate: $util.toJson($context.result.items)

    ResolverUpdate:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: update
            DataSourceName: !GetAtt AppSyncDataSourceNone.Name
            RequestMappingTemplate: >
                {
                    "version": "2017-02-28",
                    "payload": $utils.toJson($context.arguments.input)
                }
            ResponseMappingTemplate: $utils.toJson($context.result)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Product Updated Event Rule
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ProductUpdatedEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Listen on the custom event bus for events
            EventBusName: !ImportValue AppsyncCoffeeshopEventBusName
            EventPattern:
                source:
                    - custom.AppsyncCoffeeshopAdmin
                detail-type:
                    - product-updated
            Targets:
                - Arn: !Ref ProductUpdatedWorkflow
                  Id: ProductUpdatedWorkflow
                  RoleArn: !GetAtt InvokeWorkflowRole.Arn

    InvokeWorkflowRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: InvokeCustomerWorkflowsPolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - states:StartExecution
                            Resource:
                                - !Ref ProductUpdatedWorkflow

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Product Updated Step Function Workflow
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ProductUpdatedWorkflow:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: ProductUpdatedWorkflow
            RoleArn: !GetAtt ProductUpdatedRole.Arn
            DefinitionString: !Sub
                - |-
                    {
                        "Comment": "Handles ProductUpdated Workflow",
                        "StartAt": "ChoiceState",
                        "States": {
                            "ChoiceState": {
                                "Type": "Choice",
                                "Choices": [
                                    {
                                        "Variable": "$.detail.type",
                                        "StringEquals": "create",
                                        "Next": "Create"
                                    },
                                    {
                                        "Variable": "$.detail.type",
                                        "StringEquals": "remove",
                                        "Next": "Remove"
                                    }
                                ]
                            },
                            "Create": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::dynamodb:putItem",
                                "Parameters": {
                                    "TableName": "${Database}",
                                    "Item": {
                                        "PK": {"S.$": "$.detail.PK"},
                                        "SK": {"S.$": "$.detail.SK"},
                                        "title": {"S.$": "$.detail.data.title"},
                                        "price": {"S.$": "$.detail.data.price"},
                                        "category": {"S.$": "$.detail.data.category"}                       
                                    }
                                },
                                "ResultPath": "$.DynamoDB",
                                "Next": "Trigger Subscription"
                            },
                            "Remove": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::dynamodb:deleteItem",
                                "Parameters": {
                                    "TableName": "${Database}",
                                    "Key": {
                                        "PK": {"S.$": "$.detail.PK"},
                                        "SK": {"S.$": "$.detail.SK"}                         
                                    }
                                },
                                "ResultPath": "$.DynamoDB",
                                "Next": "Trigger Subscription"
                            },         
                            "Trigger Subscription": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::lambda:invoke",
                                "Parameters": {
                                  "FunctionName": "${Function}",
                                  "Payload": {
                                    "PK": {"S.$": "$.detail.PK"}
                                  }
                                },
                                "End": true
                            }
                        }
                    }
                - {
                      Database: !Ref MyTable,
                      Function: !Ref TriggerSubscriptionFunction
                  }
    ProductUpdatedRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - !Sub states.${AWS::Region}.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: PublishEventsPolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                                - dynamodb:DeleteItem
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}
                - PolicyName: ProductUpdatedRole-calllambda
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:InvokeFunction
                            Resource:
                                - !GetAtt TriggerSubscriptionFunction.Arn

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # "Make Authorized Mutation" Lambda Function
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    TriggerSubscriptionFunction:
        Type: AWS::Lambda::Function
        Properties:
            Runtime: nodejs12.x
            Role: !GetAtt LambdaRole.Arn
            Handler: index.handler
            Layers:
                - !Sub
                  - ${Layer}:1
                  - Layer: !ImportValue CoffeeshopLayer
            Environment:
                Variables:
                    TABLE: !Ref MyTable
                    REGION: !Sub ${AWS::Region}
                    ENDPOINT: !GetAtt AppSyncAPI.GraphQLUrl
            Code:
                ZipFile: >
                    const AWS = require("aws-sdk");
                    const utils = require('/opt/nodejs/utils.js');
                    const dynamoDb = new AWS.DynamoDB.DocumentClient({
                        region: process.env.REGION
                    });
                    exports.handler = async (e) => {    
                        const rawProducts = await dynamoDb.query({
                          TableName:process.env.TABLE,
                          KeyConditionExpression: 'PK = :pk AND begins_with(SK, :sk)',
                            ExpressionAttributeValues: {
                                ':pk': e.PK.S,
                                ':sk': 'product_'
                            }
                        }).promise()
                        await utils.makeSignedAppsyncQuery(process.env.ENDPOINT, {
                            query: `mutation($input: ListResponseInput) {
                                    update(input: $input){
                                      PK
                                      list {
                                        PK,
                                        SK,
                                        title,
                                        price,
                                        category
                                      }
                                    }
                                }`,
                            variables: {
                              input: {
                                PK: e.PK.S,
                                list: rawProducts.Items
                              }
                            }
                        })
                    }

            Description: Makes IAM Signed Appsync Query.
            TracingConfig:
                Mode: Active

    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: AppsyncCoffeeshopMenu-lambda-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - lambda.amazonaws.com
            Policies:
                - PolicyName: AppsyncCoffeeshopInfra-Events-lambdapolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:Scan
                                - dynamodb:Query
                                - dynamodb:GetItem
                                - dynamodb:PutItem
                                - dynamodb:UpdateItem
                                - dynamodb:DeleteItem
                            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}
                          - Effect: 'Allow'
                            Action:
                                - appsync:GraphQL
                            Resource:
                                Fn::Join:
                                    - ''
                                    - - Ref: AppSyncAPI
                                      - '/types/Mutation/fields/update'
Outputs:
    APIKey:
        Description: API Key
        Value: !GetAtt AppSyncAPIKey.ApiKey

    GraphQL:
        Description: GraphQL URL
        Value: !GetAtt AppSyncAPI.GraphQLUrl
